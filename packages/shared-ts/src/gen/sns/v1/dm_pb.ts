// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=.ts"
// @generated from file sns/v1/dm.proto (package sns.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message as Message$1, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Cursor } from "./timeline_pb.ts";

/**
 * @generated from message sns.v1.Conversation
 */
export class Conversation extends Message$1<Conversation> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string created_at = 2;
   */
  createdAt = "";

  /**
   * @generated from field: repeated uint64 member_user_ids = 3;
   */
  memberUserIds: bigint[] = [];

  constructor(data?: PartialMessage<Conversation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sns.v1.Conversation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "member_user_ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Conversation {
    return new Conversation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Conversation {
    return new Conversation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Conversation {
    return new Conversation().fromJsonString(jsonString, options);
  }

  static equals(a: Conversation | PlainMessage<Conversation> | undefined, b: Conversation | PlainMessage<Conversation> | undefined): boolean {
    return proto3.util.equals(Conversation, a, b);
  }
}

/**
 * @generated from message sns.v1.Message
 */
export class Message extends Message$1<Message> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: uint64 conversation_id = 2;
   */
  conversationId = protoInt64.zero;

  /**
   * @generated from field: uint64 sender_user_id = 3;
   */
  senderUserId = protoInt64.zero;

  /**
   * @generated from field: string body = 4;
   */
  body = "";

  /**
   * @generated from field: string created_at = 5;
   */
  createdAt = "";

  constructor(data?: PartialMessage<Message>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sns.v1.Message";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "conversation_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "sender_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Message {
    return new Message().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJsonString(jsonString, options);
  }

  static equals(a: Message | PlainMessage<Message> | undefined, b: Message | PlainMessage<Message> | undefined): boolean {
    return proto3.util.equals(Message, a, b);
  }
}

/**
 * @generated from message sns.v1.GetOrCreateDMRequest
 */
export class GetOrCreateDMRequest extends Message$1<GetOrCreateDMRequest> {
  /**
   * @generated from field: uint64 other_user_id = 1;
   */
  otherUserId = protoInt64.zero;

  constructor(data?: PartialMessage<GetOrCreateDMRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sns.v1.GetOrCreateDMRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "other_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrCreateDMRequest {
    return new GetOrCreateDMRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrCreateDMRequest {
    return new GetOrCreateDMRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrCreateDMRequest {
    return new GetOrCreateDMRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrCreateDMRequest | PlainMessage<GetOrCreateDMRequest> | undefined, b: GetOrCreateDMRequest | PlainMessage<GetOrCreateDMRequest> | undefined): boolean {
    return proto3.util.equals(GetOrCreateDMRequest, a, b);
  }
}

/**
 * @generated from message sns.v1.GetOrCreateDMResponse
 */
export class GetOrCreateDMResponse extends Message$1<GetOrCreateDMResponse> {
  /**
   * @generated from field: uint64 conversation_id = 1;
   */
  conversationId = protoInt64.zero;

  constructor(data?: PartialMessage<GetOrCreateDMResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sns.v1.GetOrCreateDMResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "conversation_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrCreateDMResponse {
    return new GetOrCreateDMResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrCreateDMResponse {
    return new GetOrCreateDMResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrCreateDMResponse {
    return new GetOrCreateDMResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrCreateDMResponse | PlainMessage<GetOrCreateDMResponse> | undefined, b: GetOrCreateDMResponse | PlainMessage<GetOrCreateDMResponse> | undefined): boolean {
    return proto3.util.equals(GetOrCreateDMResponse, a, b);
  }
}

/**
 * @generated from message sns.v1.ListConversationsRequest
 */
export class ListConversationsRequest extends Message$1<ListConversationsRequest> {
  /**
   * @generated from field: sns.v1.Cursor cursor = 1;
   */
  cursor?: Cursor;

  constructor(data?: PartialMessage<ListConversationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sns.v1.ListConversationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cursor", kind: "message", T: Cursor },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListConversationsRequest {
    return new ListConversationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListConversationsRequest {
    return new ListConversationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListConversationsRequest {
    return new ListConversationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListConversationsRequest | PlainMessage<ListConversationsRequest> | undefined, b: ListConversationsRequest | PlainMessage<ListConversationsRequest> | undefined): boolean {
    return proto3.util.equals(ListConversationsRequest, a, b);
  }
}

/**
 * @generated from message sns.v1.ListConversationsResponse
 */
export class ListConversationsResponse extends Message$1<ListConversationsResponse> {
  /**
   * @generated from field: repeated sns.v1.Conversation items = 1;
   */
  items: Conversation[] = [];

  /**
   * @generated from field: sns.v1.Cursor next = 2;
   */
  next?: Cursor;

  constructor(data?: PartialMessage<ListConversationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sns.v1.ListConversationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: Conversation, repeated: true },
    { no: 2, name: "next", kind: "message", T: Cursor },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListConversationsResponse {
    return new ListConversationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListConversationsResponse {
    return new ListConversationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListConversationsResponse {
    return new ListConversationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListConversationsResponse | PlainMessage<ListConversationsResponse> | undefined, b: ListConversationsResponse | PlainMessage<ListConversationsResponse> | undefined): boolean {
    return proto3.util.equals(ListConversationsResponse, a, b);
  }
}

/**
 * @generated from message sns.v1.ListMessagesRequest
 */
export class ListMessagesRequest extends Message$1<ListMessagesRequest> {
  /**
   * @generated from field: uint64 conversation_id = 1;
   */
  conversationId = protoInt64.zero;

  /**
   * @generated from field: sns.v1.Cursor cursor = 2;
   */
  cursor?: Cursor;

  constructor(data?: PartialMessage<ListMessagesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sns.v1.ListMessagesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "conversation_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "cursor", kind: "message", T: Cursor },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListMessagesRequest {
    return new ListMessagesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListMessagesRequest {
    return new ListMessagesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListMessagesRequest {
    return new ListMessagesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListMessagesRequest | PlainMessage<ListMessagesRequest> | undefined, b: ListMessagesRequest | PlainMessage<ListMessagesRequest> | undefined): boolean {
    return proto3.util.equals(ListMessagesRequest, a, b);
  }
}

/**
 * @generated from message sns.v1.ListMessagesResponse
 */
export class ListMessagesResponse extends Message$1<ListMessagesResponse> {
  /**
   * @generated from field: repeated sns.v1.Message items = 1;
   */
  items: Message[] = [];

  /**
   * @generated from field: sns.v1.Cursor next = 2;
   */
  next?: Cursor;

  constructor(data?: PartialMessage<ListMessagesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sns.v1.ListMessagesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: Message, repeated: true },
    { no: 2, name: "next", kind: "message", T: Cursor },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListMessagesResponse {
    return new ListMessagesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListMessagesResponse {
    return new ListMessagesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListMessagesResponse {
    return new ListMessagesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListMessagesResponse | PlainMessage<ListMessagesResponse> | undefined, b: ListMessagesResponse | PlainMessage<ListMessagesResponse> | undefined): boolean {
    return proto3.util.equals(ListMessagesResponse, a, b);
  }
}

/**
 * @generated from message sns.v1.SendMessageRequest
 */
export class SendMessageRequest extends Message$1<SendMessageRequest> {
  /**
   * @generated from field: uint64 conversation_id = 1;
   */
  conversationId = protoInt64.zero;

  /**
   * @generated from field: string body = 2;
   */
  body = "";

  constructor(data?: PartialMessage<SendMessageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sns.v1.SendMessageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "conversation_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendMessageRequest {
    return new SendMessageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendMessageRequest {
    return new SendMessageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendMessageRequest {
    return new SendMessageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SendMessageRequest | PlainMessage<SendMessageRequest> | undefined, b: SendMessageRequest | PlainMessage<SendMessageRequest> | undefined): boolean {
    return proto3.util.equals(SendMessageRequest, a, b);
  }
}

/**
 * @generated from message sns.v1.SendMessageResponse
 */
export class SendMessageResponse extends Message$1<SendMessageResponse> {
  /**
   * @generated from field: sns.v1.Message message = 1;
   */
  message?: Message;

  constructor(data?: PartialMessage<SendMessageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sns.v1.SendMessageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "message", T: Message },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendMessageResponse {
    return new SendMessageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendMessageResponse {
    return new SendMessageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendMessageResponse {
    return new SendMessageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SendMessageResponse | PlainMessage<SendMessageResponse> | undefined, b: SendMessageResponse | PlainMessage<SendMessageResponse> | undefined): boolean {
    return proto3.util.equals(SendMessageResponse, a, b);
  }
}

