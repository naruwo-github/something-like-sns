// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=.ts"
// @generated from file sns/v1/tenant.proto (package sns.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message sns.v1.ResolveTenantRequest
 */
export class ResolveTenantRequest extends Message<ResolveTenantRequest> {
  /**
   * @generated from field: string host = 1;
   */
  host = "";

  constructor(data?: PartialMessage<ResolveTenantRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sns.v1.ResolveTenantRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResolveTenantRequest {
    return new ResolveTenantRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResolveTenantRequest {
    return new ResolveTenantRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResolveTenantRequest {
    return new ResolveTenantRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResolveTenantRequest | PlainMessage<ResolveTenantRequest> | undefined, b: ResolveTenantRequest | PlainMessage<ResolveTenantRequest> | undefined): boolean {
    return proto3.util.equals(ResolveTenantRequest, a, b);
  }
}

/**
 * @generated from message sns.v1.ResolveTenantResponse
 */
export class ResolveTenantResponse extends Message<ResolveTenantResponse> {
  /**
   * @generated from field: uint64 tenant_id = 1;
   */
  tenantId = protoInt64.zero;

  /**
   * @generated from field: string slug = 2;
   */
  slug = "";

  constructor(data?: PartialMessage<ResolveTenantResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sns.v1.ResolveTenantResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResolveTenantResponse {
    return new ResolveTenantResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResolveTenantResponse {
    return new ResolveTenantResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResolveTenantResponse {
    return new ResolveTenantResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ResolveTenantResponse | PlainMessage<ResolveTenantResponse> | undefined, b: ResolveTenantResponse | PlainMessage<ResolveTenantResponse> | undefined): boolean {
    return proto3.util.equals(ResolveTenantResponse, a, b);
  }
}

/**
 * @generated from message sns.v1.GetMeRequest
 */
export class GetMeRequest extends Message<GetMeRequest> {
  constructor(data?: PartialMessage<GetMeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sns.v1.GetMeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMeRequest {
    return new GetMeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMeRequest {
    return new GetMeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMeRequest {
    return new GetMeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetMeRequest | PlainMessage<GetMeRequest> | undefined, b: GetMeRequest | PlainMessage<GetMeRequest> | undefined): boolean {
    return proto3.util.equals(GetMeRequest, a, b);
  }
}

/**
 * @generated from message sns.v1.GetMeResponse
 */
export class GetMeResponse extends Message<GetMeResponse> {
  /**
   * @generated from field: uint64 user_id = 1;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  /**
   * @generated from field: repeated sns.v1.TenantMembership memberships = 3;
   */
  memberships: TenantMembership[] = [];

  constructor(data?: PartialMessage<GetMeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sns.v1.GetMeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "memberships", kind: "message", T: TenantMembership, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMeResponse {
    return new GetMeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMeResponse {
    return new GetMeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMeResponse {
    return new GetMeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetMeResponse | PlainMessage<GetMeResponse> | undefined, b: GetMeResponse | PlainMessage<GetMeResponse> | undefined): boolean {
    return proto3.util.equals(GetMeResponse, a, b);
  }
}

/**
 * @generated from message sns.v1.TenantMembership
 */
export class TenantMembership extends Message<TenantMembership> {
  /**
   * @generated from field: uint64 tenant_id = 1;
   */
  tenantId = protoInt64.zero;

  /**
   * @generated from field: string role = 2;
   */
  role = "";

  /**
   * @generated from field: string tenant_slug = 3;
   */
  tenantSlug = "";

  constructor(data?: PartialMessage<TenantMembership>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sns.v1.TenantMembership";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "tenant_slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantMembership {
    return new TenantMembership().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantMembership {
    return new TenantMembership().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantMembership {
    return new TenantMembership().fromJsonString(jsonString, options);
  }

  static equals(a: TenantMembership | PlainMessage<TenantMembership> | undefined, b: TenantMembership | PlainMessage<TenantMembership> | undefined): boolean {
    return proto3.util.equals(TenantMembership, a, b);
  }
}

