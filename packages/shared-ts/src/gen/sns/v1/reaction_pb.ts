// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=.ts"
// @generated from file sns/v1/reaction.proto (package sns.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum sns.v1.TargetType
 */
export enum TargetType {
  /**
   * @generated from enum value: TARGET_TYPE_UNSPECIFIED = 0;
   */
  TARGET_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: POST = 1;
   */
  POST = 1,

  /**
   * @generated from enum value: COMMENT = 2;
   */
  COMMENT = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(TargetType)
proto3.util.setEnumType(TargetType, "sns.v1.TargetType", [
  { no: 0, name: "TARGET_TYPE_UNSPECIFIED" },
  { no: 1, name: "POST" },
  { no: 2, name: "COMMENT" },
]);

/**
 * @generated from message sns.v1.ToggleReactionRequest
 */
export class ToggleReactionRequest extends Message<ToggleReactionRequest> {
  /**
   * @generated from field: sns.v1.TargetType target_type = 1;
   */
  targetType = TargetType.TARGET_TYPE_UNSPECIFIED;

  /**
   * @generated from field: uint64 target_id = 2;
   */
  targetId = protoInt64.zero;

  /**
   * @generated from field: string type = 3;
   */
  type = "";

  constructor(data?: PartialMessage<ToggleReactionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sns.v1.ToggleReactionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target_type", kind: "enum", T: proto3.getEnumType(TargetType) },
    { no: 2, name: "target_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ToggleReactionRequest {
    return new ToggleReactionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ToggleReactionRequest {
    return new ToggleReactionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ToggleReactionRequest {
    return new ToggleReactionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ToggleReactionRequest | PlainMessage<ToggleReactionRequest> | undefined, b: ToggleReactionRequest | PlainMessage<ToggleReactionRequest> | undefined): boolean {
    return proto3.util.equals(ToggleReactionRequest, a, b);
  }
}

/**
 * @generated from message sns.v1.ToggleReactionResponse
 */
export class ToggleReactionResponse extends Message<ToggleReactionResponse> {
  /**
   * @generated from field: bool active = 1;
   */
  active = false;

  /**
   * @generated from field: uint32 total = 2;
   */
  total = 0;

  constructor(data?: PartialMessage<ToggleReactionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sns.v1.ToggleReactionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "total", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ToggleReactionResponse {
    return new ToggleReactionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ToggleReactionResponse {
    return new ToggleReactionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ToggleReactionResponse {
    return new ToggleReactionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ToggleReactionResponse | PlainMessage<ToggleReactionResponse> | undefined, b: ToggleReactionResponse | PlainMessage<ToggleReactionResponse> | undefined): boolean {
    return proto3.util.equals(ToggleReactionResponse, a, b);
  }
}

