// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: sns/v1/tenant.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/example/something-like-sns/apps/api/gen/sns/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TenantServiceName is the fully-qualified name of the TenantService service.
	TenantServiceName = "sns.v1.TenantService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TenantServiceResolveTenantProcedure is the fully-qualified name of the TenantService's
	// ResolveTenant RPC.
	TenantServiceResolveTenantProcedure = "/sns.v1.TenantService/ResolveTenant"
	// TenantServiceGetMeProcedure is the fully-qualified name of the TenantService's GetMe RPC.
	TenantServiceGetMeProcedure = "/sns.v1.TenantService/GetMe"
)

// TenantServiceClient is a client for the sns.v1.TenantService service.
type TenantServiceClient interface {
	ResolveTenant(context.Context, *connect.Request[v1.ResolveTenantRequest]) (*connect.Response[v1.ResolveTenantResponse], error)
	GetMe(context.Context, *connect.Request[v1.GetMeRequest]) (*connect.Response[v1.GetMeResponse], error)
}

// NewTenantServiceClient constructs a client for the sns.v1.TenantService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTenantServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TenantServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	tenantServiceMethods := v1.File_sns_v1_tenant_proto.Services().ByName("TenantService").Methods()
	return &tenantServiceClient{
		resolveTenant: connect.NewClient[v1.ResolveTenantRequest, v1.ResolveTenantResponse](
			httpClient,
			baseURL+TenantServiceResolveTenantProcedure,
			connect.WithSchema(tenantServiceMethods.ByName("ResolveTenant")),
			connect.WithClientOptions(opts...),
		),
		getMe: connect.NewClient[v1.GetMeRequest, v1.GetMeResponse](
			httpClient,
			baseURL+TenantServiceGetMeProcedure,
			connect.WithSchema(tenantServiceMethods.ByName("GetMe")),
			connect.WithClientOptions(opts...),
		),
	}
}

// tenantServiceClient implements TenantServiceClient.
type tenantServiceClient struct {
	resolveTenant *connect.Client[v1.ResolveTenantRequest, v1.ResolveTenantResponse]
	getMe         *connect.Client[v1.GetMeRequest, v1.GetMeResponse]
}

// ResolveTenant calls sns.v1.TenantService.ResolveTenant.
func (c *tenantServiceClient) ResolveTenant(ctx context.Context, req *connect.Request[v1.ResolveTenantRequest]) (*connect.Response[v1.ResolveTenantResponse], error) {
	return c.resolveTenant.CallUnary(ctx, req)
}

// GetMe calls sns.v1.TenantService.GetMe.
func (c *tenantServiceClient) GetMe(ctx context.Context, req *connect.Request[v1.GetMeRequest]) (*connect.Response[v1.GetMeResponse], error) {
	return c.getMe.CallUnary(ctx, req)
}

// TenantServiceHandler is an implementation of the sns.v1.TenantService service.
type TenantServiceHandler interface {
	ResolveTenant(context.Context, *connect.Request[v1.ResolveTenantRequest]) (*connect.Response[v1.ResolveTenantResponse], error)
	GetMe(context.Context, *connect.Request[v1.GetMeRequest]) (*connect.Response[v1.GetMeResponse], error)
}

// NewTenantServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTenantServiceHandler(svc TenantServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tenantServiceMethods := v1.File_sns_v1_tenant_proto.Services().ByName("TenantService").Methods()
	tenantServiceResolveTenantHandler := connect.NewUnaryHandler(
		TenantServiceResolveTenantProcedure,
		svc.ResolveTenant,
		connect.WithSchema(tenantServiceMethods.ByName("ResolveTenant")),
		connect.WithHandlerOptions(opts...),
	)
	tenantServiceGetMeHandler := connect.NewUnaryHandler(
		TenantServiceGetMeProcedure,
		svc.GetMe,
		connect.WithSchema(tenantServiceMethods.ByName("GetMe")),
		connect.WithHandlerOptions(opts...),
	)
	return "/sns.v1.TenantService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TenantServiceResolveTenantProcedure:
			tenantServiceResolveTenantHandler.ServeHTTP(w, r)
		case TenantServiceGetMeProcedure:
			tenantServiceGetMeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTenantServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTenantServiceHandler struct{}

func (UnimplementedTenantServiceHandler) ResolveTenant(context.Context, *connect.Request[v1.ResolveTenantRequest]) (*connect.Response[v1.ResolveTenantResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sns.v1.TenantService.ResolveTenant is not implemented"))
}

func (UnimplementedTenantServiceHandler) GetMe(context.Context, *connect.Request[v1.GetMeRequest]) (*connect.Response[v1.GetMeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sns.v1.TenantService.GetMe is not implemented"))
}
