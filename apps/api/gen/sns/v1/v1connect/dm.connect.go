// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: sns/v1/dm.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/example/something-like-sns/apps/api/gen/sns/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DMServiceName is the fully-qualified name of the DMService service.
	DMServiceName = "sns.v1.DMService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DMServiceGetOrCreateDMProcedure is the fully-qualified name of the DMService's GetOrCreateDM RPC.
	DMServiceGetOrCreateDMProcedure = "/sns.v1.DMService/GetOrCreateDM"
	// DMServiceListConversationsProcedure is the fully-qualified name of the DMService's
	// ListConversations RPC.
	DMServiceListConversationsProcedure = "/sns.v1.DMService/ListConversations"
	// DMServiceListMessagesProcedure is the fully-qualified name of the DMService's ListMessages RPC.
	DMServiceListMessagesProcedure = "/sns.v1.DMService/ListMessages"
	// DMServiceSendMessageProcedure is the fully-qualified name of the DMService's SendMessage RPC.
	DMServiceSendMessageProcedure = "/sns.v1.DMService/SendMessage"
)

// DMServiceClient is a client for the sns.v1.DMService service.
type DMServiceClient interface {
	GetOrCreateDM(context.Context, *connect.Request[v1.GetOrCreateDMRequest]) (*connect.Response[v1.GetOrCreateDMResponse], error)
	ListConversations(context.Context, *connect.Request[v1.ListConversationsRequest]) (*connect.Response[v1.ListConversationsResponse], error)
	ListMessages(context.Context, *connect.Request[v1.ListMessagesRequest]) (*connect.Response[v1.ListMessagesResponse], error)
	SendMessage(context.Context, *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error)
}

// NewDMServiceClient constructs a client for the sns.v1.DMService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDMServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DMServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	dMServiceMethods := v1.File_sns_v1_dm_proto.Services().ByName("DMService").Methods()
	return &dMServiceClient{
		getOrCreateDM: connect.NewClient[v1.GetOrCreateDMRequest, v1.GetOrCreateDMResponse](
			httpClient,
			baseURL+DMServiceGetOrCreateDMProcedure,
			connect.WithSchema(dMServiceMethods.ByName("GetOrCreateDM")),
			connect.WithClientOptions(opts...),
		),
		listConversations: connect.NewClient[v1.ListConversationsRequest, v1.ListConversationsResponse](
			httpClient,
			baseURL+DMServiceListConversationsProcedure,
			connect.WithSchema(dMServiceMethods.ByName("ListConversations")),
			connect.WithClientOptions(opts...),
		),
		listMessages: connect.NewClient[v1.ListMessagesRequest, v1.ListMessagesResponse](
			httpClient,
			baseURL+DMServiceListMessagesProcedure,
			connect.WithSchema(dMServiceMethods.ByName("ListMessages")),
			connect.WithClientOptions(opts...),
		),
		sendMessage: connect.NewClient[v1.SendMessageRequest, v1.SendMessageResponse](
			httpClient,
			baseURL+DMServiceSendMessageProcedure,
			connect.WithSchema(dMServiceMethods.ByName("SendMessage")),
			connect.WithClientOptions(opts...),
		),
	}
}

// dMServiceClient implements DMServiceClient.
type dMServiceClient struct {
	getOrCreateDM     *connect.Client[v1.GetOrCreateDMRequest, v1.GetOrCreateDMResponse]
	listConversations *connect.Client[v1.ListConversationsRequest, v1.ListConversationsResponse]
	listMessages      *connect.Client[v1.ListMessagesRequest, v1.ListMessagesResponse]
	sendMessage       *connect.Client[v1.SendMessageRequest, v1.SendMessageResponse]
}

// GetOrCreateDM calls sns.v1.DMService.GetOrCreateDM.
func (c *dMServiceClient) GetOrCreateDM(ctx context.Context, req *connect.Request[v1.GetOrCreateDMRequest]) (*connect.Response[v1.GetOrCreateDMResponse], error) {
	return c.getOrCreateDM.CallUnary(ctx, req)
}

// ListConversations calls sns.v1.DMService.ListConversations.
func (c *dMServiceClient) ListConversations(ctx context.Context, req *connect.Request[v1.ListConversationsRequest]) (*connect.Response[v1.ListConversationsResponse], error) {
	return c.listConversations.CallUnary(ctx, req)
}

// ListMessages calls sns.v1.DMService.ListMessages.
func (c *dMServiceClient) ListMessages(ctx context.Context, req *connect.Request[v1.ListMessagesRequest]) (*connect.Response[v1.ListMessagesResponse], error) {
	return c.listMessages.CallUnary(ctx, req)
}

// SendMessage calls sns.v1.DMService.SendMessage.
func (c *dMServiceClient) SendMessage(ctx context.Context, req *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error) {
	return c.sendMessage.CallUnary(ctx, req)
}

// DMServiceHandler is an implementation of the sns.v1.DMService service.
type DMServiceHandler interface {
	GetOrCreateDM(context.Context, *connect.Request[v1.GetOrCreateDMRequest]) (*connect.Response[v1.GetOrCreateDMResponse], error)
	ListConversations(context.Context, *connect.Request[v1.ListConversationsRequest]) (*connect.Response[v1.ListConversationsResponse], error)
	ListMessages(context.Context, *connect.Request[v1.ListMessagesRequest]) (*connect.Response[v1.ListMessagesResponse], error)
	SendMessage(context.Context, *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error)
}

// NewDMServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDMServiceHandler(svc DMServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dMServiceMethods := v1.File_sns_v1_dm_proto.Services().ByName("DMService").Methods()
	dMServiceGetOrCreateDMHandler := connect.NewUnaryHandler(
		DMServiceGetOrCreateDMProcedure,
		svc.GetOrCreateDM,
		connect.WithSchema(dMServiceMethods.ByName("GetOrCreateDM")),
		connect.WithHandlerOptions(opts...),
	)
	dMServiceListConversationsHandler := connect.NewUnaryHandler(
		DMServiceListConversationsProcedure,
		svc.ListConversations,
		connect.WithSchema(dMServiceMethods.ByName("ListConversations")),
		connect.WithHandlerOptions(opts...),
	)
	dMServiceListMessagesHandler := connect.NewUnaryHandler(
		DMServiceListMessagesProcedure,
		svc.ListMessages,
		connect.WithSchema(dMServiceMethods.ByName("ListMessages")),
		connect.WithHandlerOptions(opts...),
	)
	dMServiceSendMessageHandler := connect.NewUnaryHandler(
		DMServiceSendMessageProcedure,
		svc.SendMessage,
		connect.WithSchema(dMServiceMethods.ByName("SendMessage")),
		connect.WithHandlerOptions(opts...),
	)
	return "/sns.v1.DMService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DMServiceGetOrCreateDMProcedure:
			dMServiceGetOrCreateDMHandler.ServeHTTP(w, r)
		case DMServiceListConversationsProcedure:
			dMServiceListConversationsHandler.ServeHTTP(w, r)
		case DMServiceListMessagesProcedure:
			dMServiceListMessagesHandler.ServeHTTP(w, r)
		case DMServiceSendMessageProcedure:
			dMServiceSendMessageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDMServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDMServiceHandler struct{}

func (UnimplementedDMServiceHandler) GetOrCreateDM(context.Context, *connect.Request[v1.GetOrCreateDMRequest]) (*connect.Response[v1.GetOrCreateDMResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sns.v1.DMService.GetOrCreateDM is not implemented"))
}

func (UnimplementedDMServiceHandler) ListConversations(context.Context, *connect.Request[v1.ListConversationsRequest]) (*connect.Response[v1.ListConversationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sns.v1.DMService.ListConversations is not implemented"))
}

func (UnimplementedDMServiceHandler) ListMessages(context.Context, *connect.Request[v1.ListMessagesRequest]) (*connect.Response[v1.ListMessagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sns.v1.DMService.ListMessages is not implemented"))
}

func (UnimplementedDMServiceHandler) SendMessage(context.Context, *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sns.v1.DMService.SendMessage is not implemented"))
}
