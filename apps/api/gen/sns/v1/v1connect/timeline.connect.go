// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: sns/v1/timeline.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/example/something-like-sns/apps/api/gen/sns/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TimelineServiceName is the fully-qualified name of the TimelineService service.
	TimelineServiceName = "sns.v1.TimelineService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TimelineServiceListFeedProcedure is the fully-qualified name of the TimelineService's ListFeed
	// RPC.
	TimelineServiceListFeedProcedure = "/sns.v1.TimelineService/ListFeed"
	// TimelineServiceCreatePostProcedure is the fully-qualified name of the TimelineService's
	// CreatePost RPC.
	TimelineServiceCreatePostProcedure = "/sns.v1.TimelineService/CreatePost"
	// TimelineServiceListCommentsProcedure is the fully-qualified name of the TimelineService's
	// ListComments RPC.
	TimelineServiceListCommentsProcedure = "/sns.v1.TimelineService/ListComments"
	// TimelineServiceCreateCommentProcedure is the fully-qualified name of the TimelineService's
	// CreateComment RPC.
	TimelineServiceCreateCommentProcedure = "/sns.v1.TimelineService/CreateComment"
)

// TimelineServiceClient is a client for the sns.v1.TimelineService service.
type TimelineServiceClient interface {
	ListFeed(context.Context, *connect.Request[v1.ListFeedRequest]) (*connect.Response[v1.ListFeedResponse], error)
	CreatePost(context.Context, *connect.Request[v1.CreatePostRequest]) (*connect.Response[v1.CreatePostResponse], error)
	ListComments(context.Context, *connect.Request[v1.ListCommentsRequest]) (*connect.Response[v1.ListCommentsResponse], error)
	CreateComment(context.Context, *connect.Request[v1.CreateCommentRequest]) (*connect.Response[v1.CreateCommentResponse], error)
}

// NewTimelineServiceClient constructs a client for the sns.v1.TimelineService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTimelineServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TimelineServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	timelineServiceMethods := v1.File_sns_v1_timeline_proto.Services().ByName("TimelineService").Methods()
	return &timelineServiceClient{
		listFeed: connect.NewClient[v1.ListFeedRequest, v1.ListFeedResponse](
			httpClient,
			baseURL+TimelineServiceListFeedProcedure,
			connect.WithSchema(timelineServiceMethods.ByName("ListFeed")),
			connect.WithClientOptions(opts...),
		),
		createPost: connect.NewClient[v1.CreatePostRequest, v1.CreatePostResponse](
			httpClient,
			baseURL+TimelineServiceCreatePostProcedure,
			connect.WithSchema(timelineServiceMethods.ByName("CreatePost")),
			connect.WithClientOptions(opts...),
		),
		listComments: connect.NewClient[v1.ListCommentsRequest, v1.ListCommentsResponse](
			httpClient,
			baseURL+TimelineServiceListCommentsProcedure,
			connect.WithSchema(timelineServiceMethods.ByName("ListComments")),
			connect.WithClientOptions(opts...),
		),
		createComment: connect.NewClient[v1.CreateCommentRequest, v1.CreateCommentResponse](
			httpClient,
			baseURL+TimelineServiceCreateCommentProcedure,
			connect.WithSchema(timelineServiceMethods.ByName("CreateComment")),
			connect.WithClientOptions(opts...),
		),
	}
}

// timelineServiceClient implements TimelineServiceClient.
type timelineServiceClient struct {
	listFeed      *connect.Client[v1.ListFeedRequest, v1.ListFeedResponse]
	createPost    *connect.Client[v1.CreatePostRequest, v1.CreatePostResponse]
	listComments  *connect.Client[v1.ListCommentsRequest, v1.ListCommentsResponse]
	createComment *connect.Client[v1.CreateCommentRequest, v1.CreateCommentResponse]
}

// ListFeed calls sns.v1.TimelineService.ListFeed.
func (c *timelineServiceClient) ListFeed(ctx context.Context, req *connect.Request[v1.ListFeedRequest]) (*connect.Response[v1.ListFeedResponse], error) {
	return c.listFeed.CallUnary(ctx, req)
}

// CreatePost calls sns.v1.TimelineService.CreatePost.
func (c *timelineServiceClient) CreatePost(ctx context.Context, req *connect.Request[v1.CreatePostRequest]) (*connect.Response[v1.CreatePostResponse], error) {
	return c.createPost.CallUnary(ctx, req)
}

// ListComments calls sns.v1.TimelineService.ListComments.
func (c *timelineServiceClient) ListComments(ctx context.Context, req *connect.Request[v1.ListCommentsRequest]) (*connect.Response[v1.ListCommentsResponse], error) {
	return c.listComments.CallUnary(ctx, req)
}

// CreateComment calls sns.v1.TimelineService.CreateComment.
func (c *timelineServiceClient) CreateComment(ctx context.Context, req *connect.Request[v1.CreateCommentRequest]) (*connect.Response[v1.CreateCommentResponse], error) {
	return c.createComment.CallUnary(ctx, req)
}

// TimelineServiceHandler is an implementation of the sns.v1.TimelineService service.
type TimelineServiceHandler interface {
	ListFeed(context.Context, *connect.Request[v1.ListFeedRequest]) (*connect.Response[v1.ListFeedResponse], error)
	CreatePost(context.Context, *connect.Request[v1.CreatePostRequest]) (*connect.Response[v1.CreatePostResponse], error)
	ListComments(context.Context, *connect.Request[v1.ListCommentsRequest]) (*connect.Response[v1.ListCommentsResponse], error)
	CreateComment(context.Context, *connect.Request[v1.CreateCommentRequest]) (*connect.Response[v1.CreateCommentResponse], error)
}

// NewTimelineServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTimelineServiceHandler(svc TimelineServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	timelineServiceMethods := v1.File_sns_v1_timeline_proto.Services().ByName("TimelineService").Methods()
	timelineServiceListFeedHandler := connect.NewUnaryHandler(
		TimelineServiceListFeedProcedure,
		svc.ListFeed,
		connect.WithSchema(timelineServiceMethods.ByName("ListFeed")),
		connect.WithHandlerOptions(opts...),
	)
	timelineServiceCreatePostHandler := connect.NewUnaryHandler(
		TimelineServiceCreatePostProcedure,
		svc.CreatePost,
		connect.WithSchema(timelineServiceMethods.ByName("CreatePost")),
		connect.WithHandlerOptions(opts...),
	)
	timelineServiceListCommentsHandler := connect.NewUnaryHandler(
		TimelineServiceListCommentsProcedure,
		svc.ListComments,
		connect.WithSchema(timelineServiceMethods.ByName("ListComments")),
		connect.WithHandlerOptions(opts...),
	)
	timelineServiceCreateCommentHandler := connect.NewUnaryHandler(
		TimelineServiceCreateCommentProcedure,
		svc.CreateComment,
		connect.WithSchema(timelineServiceMethods.ByName("CreateComment")),
		connect.WithHandlerOptions(opts...),
	)
	return "/sns.v1.TimelineService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TimelineServiceListFeedProcedure:
			timelineServiceListFeedHandler.ServeHTTP(w, r)
		case TimelineServiceCreatePostProcedure:
			timelineServiceCreatePostHandler.ServeHTTP(w, r)
		case TimelineServiceListCommentsProcedure:
			timelineServiceListCommentsHandler.ServeHTTP(w, r)
		case TimelineServiceCreateCommentProcedure:
			timelineServiceCreateCommentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTimelineServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTimelineServiceHandler struct{}

func (UnimplementedTimelineServiceHandler) ListFeed(context.Context, *connect.Request[v1.ListFeedRequest]) (*connect.Response[v1.ListFeedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sns.v1.TimelineService.ListFeed is not implemented"))
}

func (UnimplementedTimelineServiceHandler) CreatePost(context.Context, *connect.Request[v1.CreatePostRequest]) (*connect.Response[v1.CreatePostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sns.v1.TimelineService.CreatePost is not implemented"))
}

func (UnimplementedTimelineServiceHandler) ListComments(context.Context, *connect.Request[v1.ListCommentsRequest]) (*connect.Response[v1.ListCommentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sns.v1.TimelineService.ListComments is not implemented"))
}

func (UnimplementedTimelineServiceHandler) CreateComment(context.Context, *connect.Request[v1.CreateCommentRequest]) (*connect.Response[v1.CreateCommentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sns.v1.TimelineService.CreateComment is not implemented"))
}
