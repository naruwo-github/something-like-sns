// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: sns/v1/reaction.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/example/something-like-sns/apps/api/gen/sns/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ReactionServiceName is the fully-qualified name of the ReactionService service.
	ReactionServiceName = "sns.v1.ReactionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ReactionServiceToggleReactionProcedure is the fully-qualified name of the ReactionService's
	// ToggleReaction RPC.
	ReactionServiceToggleReactionProcedure = "/sns.v1.ReactionService/ToggleReaction"
)

// ReactionServiceClient is a client for the sns.v1.ReactionService service.
type ReactionServiceClient interface {
	ToggleReaction(context.Context, *connect.Request[v1.ToggleReactionRequest]) (*connect.Response[v1.ToggleReactionResponse], error)
}

// NewReactionServiceClient constructs a client for the sns.v1.ReactionService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReactionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ReactionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	reactionServiceMethods := v1.File_sns_v1_reaction_proto.Services().ByName("ReactionService").Methods()
	return &reactionServiceClient{
		toggleReaction: connect.NewClient[v1.ToggleReactionRequest, v1.ToggleReactionResponse](
			httpClient,
			baseURL+ReactionServiceToggleReactionProcedure,
			connect.WithSchema(reactionServiceMethods.ByName("ToggleReaction")),
			connect.WithClientOptions(opts...),
		),
	}
}

// reactionServiceClient implements ReactionServiceClient.
type reactionServiceClient struct {
	toggleReaction *connect.Client[v1.ToggleReactionRequest, v1.ToggleReactionResponse]
}

// ToggleReaction calls sns.v1.ReactionService.ToggleReaction.
func (c *reactionServiceClient) ToggleReaction(ctx context.Context, req *connect.Request[v1.ToggleReactionRequest]) (*connect.Response[v1.ToggleReactionResponse], error) {
	return c.toggleReaction.CallUnary(ctx, req)
}

// ReactionServiceHandler is an implementation of the sns.v1.ReactionService service.
type ReactionServiceHandler interface {
	ToggleReaction(context.Context, *connect.Request[v1.ToggleReactionRequest]) (*connect.Response[v1.ToggleReactionResponse], error)
}

// NewReactionServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReactionServiceHandler(svc ReactionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	reactionServiceMethods := v1.File_sns_v1_reaction_proto.Services().ByName("ReactionService").Methods()
	reactionServiceToggleReactionHandler := connect.NewUnaryHandler(
		ReactionServiceToggleReactionProcedure,
		svc.ToggleReaction,
		connect.WithSchema(reactionServiceMethods.ByName("ToggleReaction")),
		connect.WithHandlerOptions(opts...),
	)
	return "/sns.v1.ReactionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ReactionServiceToggleReactionProcedure:
			reactionServiceToggleReactionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedReactionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReactionServiceHandler struct{}

func (UnimplementedReactionServiceHandler) ToggleReaction(context.Context, *connect.Request[v1.ToggleReactionRequest]) (*connect.Response[v1.ToggleReactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sns.v1.ReactionService.ToggleReaction is not implemented"))
}
